name: Docker Image CI

on: [push]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Cache docker images
      uses: actions/cache@v1
      with:
        path: ~/caches
        key: ${{ runner.os }}-build-v2-${{ hashFiles('Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-build-v2-${{ hashFiles('Dockerfile') }}

    - name: Build docker image
      run: |
        if [ ! -f ~/caches/images.tar ]; then
          docker build -t bucky-management . --build-arg rails_env=development && \
          mkdir -p ~/caches && \
          echo 'tar start'
          docker save bucky-management -o ~/caches/images.tar
          echo 'tar finish'
        fi

  run:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Cache restore
      id: cache-primes
      uses: actions/cache@v1
      with:
        path: ~/caches
        key: ${{ runner.os }}-build-${{ hashFiles('Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ hashFiles('Dockerfile') }}
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Load and run and setup BM
      if: steps.cache.outputs.cache-hit != 'true'
      run: | 
        docker load -q -i ~/caches/images.tar
        docker network create bucky
        docker-compose -f docker-compose.bucky.yml up --build -d
        docker ps
        sleep 10
        docker exec -i bm-app rails db:create
        docker exec -i bm-app rails db:migrate
        docker exec -i bm-app rails db:fixtures:load
        curl 'http://localhost'
    - name: Clone test codes
      run: mkdir /opt/bucky-core && git clone https://github.com/hikimochi/bucky-testing.git /opt/bucky-core
    - name: cd
      run: cd /opt/bucky-core && docker-compose up --build -d && docker ps && sleep 10
    - name: exec
      run: docker exec -i bucky-core bucky run -D pc -d -l top
    
    


